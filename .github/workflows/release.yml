name: "release"

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - tests
      - pre-release
    types:
      - completed
    branches:
      - master

jobs:
  state:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup

      - id: state
        name: Compute release state
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            require('ts-node/register/transpile-only');
            await require('./scripts/release/get-release-state.ts').default(core);
    outputs:
      local_version: ${{ steps.state.outputs.local_version }}
      notes: ${{ steps.state.outputs.notes }}
      is_release_commit: ${{ steps.state.outputs.is_release_commit }}

  release:
    runs-on: ubuntu-latest
    needs: state
    if: needs.state.outputs.is_release_commit == 'true'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.ARVOLEAR_RELEASER }}
          tag_name: v${{ needs.state.outputs.local_version }}
          name: Release v${{ needs.state.outputs.local_version }}
          body: |
            # Release notes v${{ needs.state.outputs.local_version }} ðŸŽ‰
            
            ${{ needs.state.outputs.notes }}
          draft: false
          prerelease: false

  publish:
    runs-on: ubuntu-latest
    needs: state
    if: needs.state.outputs.is_release_commit == 'true'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup

      - name: Install packages
        run: npm install
        shell: bash

      - name: Publish to npm
        run: npm run publish-to-npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

